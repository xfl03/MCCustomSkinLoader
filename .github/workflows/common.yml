name: Common
on:
  workflow_call:
    inputs:
      type:
        required: true
        type: string
      publish-task:
        required: false
        type: string
      is-snapshot:
        required: false
        type: boolean
        default: true

jobs:
  build-common:
    name: Build Common
    runs-on: ubuntu-latest
    environment: Build
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '8'
          cache: 'gradle'
      -
        name: Build
        env:
          KEY_PASS: ${{ secrets.KEY_PASS }}
          IS_SNAPSHOT: ${{ inputs.is-snapshot }}
        run: |
          echo Snapshot: $IS_SNAPSHOT
          export GIT_COMMIT_DESC=$(git log --format=%B -n 1 $GITHUB_SHA)
          ./gradlew clean build --stacktrace
      -
        uses: actions/upload-artifact@v3
        name: Publish to Github Artifact
        with:
          name: CustomSkinLoader-${{ inputs.type }}-${{ github.run_number }}
          path: build/libs
      -
        uses: softprops/action-gh-release@v1
        name: Publish to Github Release
        if: ${{ inputs.is-snapshot == false }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: CustomSkinLoader ${{ github.ref }}
          tag_name: ${{ github.ref }}
          generate_release_notes: true
          files: |
            build/libs/*

  UploadTencent:
    needs: build-common
    if: ${{ inputs.publish-task }}
    name: UploadTo TencentCloud's ObjectStorage
    runs-on: ubuntu-latest
    steps:
      - 
        name: Checkout Git Repository
        uses: actions/checkout@v3
      - 
        uses: actions/download-artifact@v3
        name: Download Artifact Zips
        with:
          path: build
      - 
        name: Set Upload Env
        id: cslenv
        run: |
          rsync -avz "build/$(ls build|grep "CustomSkinLoader")/" build/libs/
          ls -lh build
       -
        name: Publish
        env:
          COS_BUCKET: ${{ secrets.COS_BUCKET }}
          COS_SECRET_ID: ${{ secrets.COS_SECRET_ID }}
          COS_SECRET_KEY: ${{ secrets.COS_SECRET_KEY }}
          IS_SNAPSHOT: ${{ inputs.is-snapshot }}
        run: |
          export GIT_COMMIT_DESC=$(git log --format=%B -n 1 $GITHUB_SHA)
          ./gradlew ${{ inputs.publish-task }} --info --stacktrace
          # ./gradlew publishGprPublicationToGitHubPackagesRepository

  Upload:
    needs: build-common
    if: ${{ inputs.is-snapshot == false }}
    continue-on-error: true
    strategy:
      matrix:
        website: [CurseForge,Modrinth]
        modtype: [Fabric,Forge-Active,Forge-Legacy]
    name: UploadTo ${{ matrix.website }} (${{ matrix.modtype}}) 
    runs-on: ubuntu-latest
    steps:
      - 
        name: Checkout Git Repository
        uses: actions/checkout@v3
      - 
        uses: actions/download-artifact@v3
        name: Download Artifact Zips
        with:
          path: build
      - 
        name: Set Upload Env
        id: cslenv
        run: |
          rsync -avz "build/$(ls build|grep "CustomSkinLoader")/" build/libs/
          ls -lh build
          output="$(ls build/libs | grep -v "sources")"
          if [[ "${{ matrix.modtype }}" == "Forge-"* ]]; then
            modloader="Forge"
            path=$(echo ${{ matrix.modtype }} | sed "s#-#/#")
          else
            modloader=${{ matrix.modtype }}
            path=${{ matrix.modtype }}
          fi
          echo "path=$path" >> $GITHUB_OUTPUT
          echo "modloader=$modloader" >> $GITHUB_OUTPUT
          echo "filename=$(echo "$output"|grep $(echo ${{ matrix.modtype }}|sed "s#-##") )" >> $GITHUB_OUTPUT
          echo "minecraft_vers=$(grep "minecraft_full_versions=" "$path"/build.properties | grep -v "#" | sed "s/minecraft_full_versions=//")" >> $GITHUB_OUTPUT
      - 
        name: Test Placeholder
        run: |
          echo path=${{ steps.cslenv.outputs.path }}
          echo filename=${{ steps.cslenv.outputs.filename }}
          echo modloader=${{ steps.cslenv.outputs.modloader }}
          echo mc_vers=${{ steps.cslenv.outputs.minecraft_vers }}
      -
        name: Publish to CurseForge
        # if: ${{ matrix.website == CurseForge }}
        if: false
        uses: itsmeow/curseforge-upload@v3
        with:
          file_path: "build/libs/${{ steps.cslenv.outputs.filename }}"
          game_endpoint: "minecraft"
          game_versions: "${{ steps.cslenv.outputs.minecraft_vers }},${{ steps.cslenv.outputs.modloader }}"
          #project_id: "0"
          token: ${{ secrets.CURSEFORGE_API_KEY }}
      - 
        name: Publish to Modrinth
        # if: ${{ matrix.website == Modrinth }}
        if: false
        uses: RubixDev/modrinth-upload@v1.0.0
        with:
          token: ${{ secrets.MODRINTH_TOKEN }}
          file_path: build/libs/${{ steps.cslenv.outputs.filename }}
          #name: My super cool mod ${{ github.event.release.tag_name }}
          version: ${{ github.ref }}
          #changelog: ${{ github.event.release.body }}
          #relations: P7dR8mSH:required
          game_versions: ${{ steps.cslenv.outputs.minecraft_vers }}
          release_type: release
          loaders: $(echo ${{ steps.cslenv.outputs.modloader }} | sed "y/F/f/")
          featured: true
          project_id: idMHQ4n2